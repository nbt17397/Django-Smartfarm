# Generated by Django 4.0.7 on 2022-08-22 02:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(null=True, upload_to='uploads/users/%Y/%m')),
                ('device_token', models.CharField(max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('description', models.CharField(max_length=255)),
                ('id_box', models.SmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='BuildingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Care',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CareSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('reason', models.CharField(max_length=150, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('uses', models.CharField(max_length=250, null=True)),
                ('origin', models.CharField(max_length=150, null=True)),
                ('nsx', models.DateField()),
                ('hsd', models.DateField()),
                ('building', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.building')),
            ],
            options={
                'unique_together': {('name', 'building')},
            },
        ),
        migrations.CreateModel(
            name='MedicineUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('start_time', models.DateTimeField()),
                ('finish_time', models.DateTimeField()),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Draft'), (1, 'InProcess'), (2, 'Ended')], default=0)),
            ],
            options={
                'unique_together': {('name', 'start_time', 'finish_time')},
            },
        ),
        migrations.CreateModel(
            name='ShrimpType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('color', models.CharField(max_length=150, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('group_id', models.SmallIntegerField()),
                ('group_name', models.CharField(max_length=150, null=True)),
                ('length', models.FloatField()),
                ('height', models.FloatField()),
                ('width', models.FloatField()),
                ('shape', models.PositiveSmallIntegerField(choices=[(0, 'rectangular'), (1, 'cylinder')], default=0)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'avaiable'), (1, 'unavaiable')], default=0)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.building')),
            ],
        ),
        migrations.CreateModel(
            name='TankPlanning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('breed_numbers', models.FloatField()),
                ('water_level', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TankType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UnitType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('action', models.PositiveSmallIntegerField(choices=[(0, 'Feed'), (1, 'Heal'), (2, 'Clean'), (3, 'WaterExchange'), (4, 'Count'), (5, 'Test')], default=0)),
                ('description', models.CharField(max_length=255)),
                ('frequency', models.IntegerField()),
                ('frequency_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.unit')),
            ],
            options={
                'unique_together': {('name', 'action')},
            },
        ),
        migrations.CreateModel(
            name='WorkMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('start_time', models.DateTimeField()),
                ('finish_time', models.DateTimeField()),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Draft'), (1, 'Doing'), (2, 'Done'), (3, 'Cancel'), (4, 'Skipped')], default=0)),
                ('path', models.ImageField(null=True, upload_to='uploads/work/%Y/%m')),
                ('care', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.care')),
                ('creator_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('performer_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performer', to=settings.AUTH_USER_MODEL)),
                ('tank_planning', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.tankplanning')),
                ('work', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.work')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserWecon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('role', models.SmallIntegerField(default=1)),
                ('username', models.CharField(max_length=150)),
                ('password', models.CharField(max_length=150)),
            ],
            options={
                'unique_together': {('username', 'role')},
            },
        ),
        migrations.AddField(
            model_name='unit',
            name='unit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hatchery.unittype'),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='breed_number_unit',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tankplan_breed_number_unit', to='hatchery.unit'),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='care_schedule',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.careschedule'),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='manager',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='season',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.season'),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='tank',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.tank'),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='tank_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.tanktype'),
        ),
        migrations.AddField(
            model_name='tankplanning',
            name='water_level_unit',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tankplan_water_level_unit', to='hatchery.unit'),
        ),
        migrations.CreateModel(
            name='TankMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('time', models.DateField()),
                ('temperature', models.FloatField(null=True)),
                ('water_level', models.FloatField(null=True)),
                ('ph', models.FloatField(null=True)),
                ('oxygen_concentration', models.FloatField(null=True)),
                ('oxygen_concentration_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tankmor_oxygen_unit', to='hatchery.unit')),
                ('ph_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ph_unit', to='hatchery.unit')),
                ('tank_planning', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.tankplanning')),
                ('temperature_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tankmor_temp_unit', to='hatchery.unit')),
                ('water_level_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tankmor_water_level_unit', to='hatchery.unit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tank',
            name='unit',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.unit'),
        ),
        migrations.CreateModel(
            name='ShrimpStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('from_age', models.IntegerField()),
                ('to_age', models.IntegerField()),
                ('from_length', models.FloatField()),
                ('to_length', models.FloatField()),
                ('from_weight', models.FloatField()),
                ('to_weight', models.FloatField()),
                ('color', models.CharField(max_length=150, null=True)),
                ('age_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shrimpstage_age_unit', to='hatchery.unit')),
                ('length_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shrimpstage_length_unit', to='hatchery.unit')),
                ('shrimp_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.shrimptype')),
                ('weight_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shrimpstage_weight_unit', to='hatchery.unit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicineRecipeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('description', models.TextField(null=True)),
                ('building', models.ManyToManyField(blank=True, related_name='medicine_recipe_type_building', to='hatchery.building')),
                ('shrimp_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.shrimptype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('medicine_form', models.PositiveSmallIntegerField(choices=[(0, 'Solution'), (1, 'Powder'), (2, 'Pill')], default=0)),
                ('origin', models.CharField(max_length=50, null=True)),
                ('manufacturer', models.CharField(max_length=50, null=True)),
                ('import_no', models.CharField(max_length=50, null=True)),
                ('expired_date', models.DateField()),
                ('building', models.ManyToManyField(blank=True, related_name='medicine_building', to='hatchery.building')),
                ('usage', models.ManyToManyField(blank=True, related_name='medicine_usage', to='hatchery.medicineusage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FoodRecipeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('comment', models.CharField(max_length=250, null=True)),
                ('building', models.ManyToManyField(blank=True, related_name='food_recipe_type_building', to='hatchery.building')),
                ('shrimp_stage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.shrimpstage')),
                ('shrimp_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.shrimptype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='careschedule',
            name='shrimp_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.shrimptype'),
        ),
        migrations.AddField(
            model_name='care',
            name='care_schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.careschedule'),
        ),
        migrations.AddField(
            model_name='care',
            name='shrimp_stage',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.shrimpstage'),
        ),
        migrations.AddField(
            model_name='building',
            name='building_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.buildingtype'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_wecon',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hatchery.userwecon'),
        ),
        migrations.AlterUniqueTogether(
            name='unit',
            unique_together={('name', 'unit_type')},
        ),
        migrations.AlterUniqueTogether(
            name='tank',
            unique_together={('name', 'building')},
        ),
        migrations.CreateModel(
            name='MedicineRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('medicine_dosage', models.FloatField()),
                ('disease', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.disease')),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.medicine')),
                ('medicine_dosage_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.unit')),
                ('medicine_recipe_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.medicinerecipetype')),
            ],
            options={
                'unique_together': {('medicine', 'medicine_recipe_type')},
            },
        ),
        migrations.CreateModel(
            name='FoodRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('food_weight', models.IntegerField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.food')),
                ('food_recipe_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hatchery.foodrecipetype')),
                ('food_weight_unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hatchery.unit')),
            ],
            options={
                'unique_together': {('food', 'food_recipe_type')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='careschedule',
            unique_together={('name', 'shrimp_type')},
        ),
        migrations.AlterUniqueTogether(
            name='care',
            unique_together={('name', 'shrimp_stage')},
        ),
        migrations.AlterUniqueTogether(
            name='building',
            unique_together={('name', 'building_type')},
        ),
    ]
